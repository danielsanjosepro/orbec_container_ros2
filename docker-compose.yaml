services:
  base:
    build:
      context: .
      target: base
    container_name: orbec_container_ros2
    # == These commands defeat the purpose of isolation but simplify now early development ==
    network_mode: "host"
    ipc: "host"
    pid: "host"
    privileged: true

    command: /bin/bash
    tty: true
    stdin_open: true
    volumes:
      - $HOME/.Xauthority:/root/.Xauthority 
      - /tmp/.X11-unix:/tmp/.X11-unix:rw 
      - /dev:/dev
    device_cgroup_rules:
      - 'c 81:* rmw'
      - 'c 189:* rmw'
    devices:
      - "/dev/input:/dev/input"  # Mount input devices (needed for the keyboard library)
    environment:
      QT_X11_NO_MITSHM: 1
      DISPLAY: $DISPLAY
      ROS_DOMAIN_ID: 100
      RCUTILS_COLORIZED_OUTPUT: 1
      SHELL: /bin/bash
      NAMESPACE: right
    cap_add:
      - SYS_NICE
    ulimits:
      rtprio: 99
      rttime: -1
      memlock: 8428281856

  overlay:
    extends: base
    image: orbec_container_ros2:overlay
    build:
      context: .
      target: overlay
    container_name: orbec_container_ros2_overlay


  launch_camera:
    extends: overlay
    container_name: orbec_container_camera
    environment:
      CAMERA_NAMESPACE: camera
      CAMERA_NAME: camera
      SERIAL_NUMBER: todo
    command: > 
      bash -c "source /opt/ros/humble/setup.bash &&
      source /home/ros/ros2_ws/install/setup.bash &&
      ros2 launch orbec_container_ros2 femto_bolt.launch.py camera_ns:=$${CAMERA_NAMESPACE} enable_ir:=false enable_depth:=false time_domain:=system camera_name:=$${CAMERA_NAME} serial_number:=$${SERIAL_NUMBER}"
